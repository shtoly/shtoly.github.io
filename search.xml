<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RN优化</title>
    <url>/2024/10/13/RN%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="移除不必要权限">移除不必要权限</h2>
<p>例如，在<code>\[项目名]\android\app\src\main\</code>下<code>AndroidManifest.xml</code>中写入如下代码</p>
<span id="more"></span>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 移除读取电话状态的权限 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">tools:node</span>=<span class="string">&quot;remove&quot;</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_PHONE_STATE&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 移除写入外部存储的权限。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">tools:node</span>=<span class="string">&quot;remove&quot;</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 移除读取外部存储的权限 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">tools:node</span>=<span class="string">&quot;remove&quot;</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<!-- more -->
<p>我们还需要在<code>AndroidManifest.xml</code>中声明了一个名为tools的XML命名空间<code>xmlns:tools=&quot;http://schemas.android.com/tools&quot;</code></p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;manifest xmlns:<span class="attribute">android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span> xmlns:<span class="attribute">tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p><strong>移除不必要权限的好处（文心一言生成）</strong>：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>提升用户隐私保护</strong>：减少不必要的权限请求可以增强用户信任，因为用户越来越关注个人数据的安全与隐私。特别是读取电话状态、读写外部存储这样的敏感权限，移除后表明应用不会侵犯用户的通信记录或存储的数据。</p>
</li>
<li class="lvl-2">
<p><strong>简化权限管理</strong>：对于用户而言，应用程序请求的权限越少，他们在安装和使用过程中遇到的权限提示就越少，从而提升用户体验。用户不再需要为不相关的功能授予权限。</p>
</li>
<li class="lvl-2">
<p><strong>降低潜在的安全风险</strong>：每个权限都可能成为安全漏洞的入口。移除不必要的权限可以减少应用受到攻击的面，提高应用的整体安全性。</p>
</li>
<li class="lvl-2">
<p><strong>合规性增强</strong>：遵循更严格的隐私法规要求，比如GDPR（欧盟通用数据保护条例）或中国的《个人信息保护法》，这些法律强调最小必要原则，即只收集和处理完成业务所必需的最少个人信息。移除多余权限有助于企业符合此类法规要求。</p>
</li>
<li class="lvl-2">
<p><strong>优化应用审核过程</strong>：在Google Play Store或其他应用市场上架时，应用的权限使用是审核的一部分。减少非必要的权限可以简化审核流程，加快应用上架速度。</p>
</li>
<li class="lvl-2">
<p><strong>可能提升性能</strong>：虽然直接关联不大，但理论上减少对存储或硬件资源的访问需求，可能轻微提升应用运行效率，尤其是对于资源紧张的设备。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>APP</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/10/18/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>RN问题解决</title>
    <url>/2024/10/13/RN%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>2024.6.14时最新版本为 0.74.2，2024.8.1时最新版本为0.74.4，但其相关依赖不太稳定，尝试使用 0.74.2 版本操作</p>
<span id="more"></span>
<h2 id="创建项目时报错：RN-error-Error">创建项目时报错：<strong>RN error Error</strong></h2>
<p><strong><font style="color:#DF2A3F;">RN error Error: getaddrinfo ENOENT <a href="http://raw.githubusercontent.com">raw.githubusercontent.com</a> at GetAddrInfoReqWrap.onlookup [as oncomplete] (node:dns:108:26)</font></strong></p>
<blockquote>
<p><strong><font style="color:#C75C00;">raw.githubusercontent.com</font></strong> 是 GitHub 提供的一个服务，用于直接访问存储在 GitHub 仓库中的原始文件（如文本文件、脚本等），而无需下载整个仓库。在 React Native (RN) 开发环境中，这个 URL 常见于以下几种场景（文心一言生成，可了解）：</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>依赖管理工具安装</strong>: 如 Homebrew 安装脚本 ruby -e “$(curl -fsSL <a href="https://raw.githubusercontent.com/Homebrew/install/master/install">https://raw.githubusercontent.com/Homebrew/install/master/install</a>)”，Homebrew 是一个 macOS 下的包管理器，广泛用于安装 RN 开发所需的工具链和依赖，比如 Node.js、watchman、Yarn 或者其他 CLI 工具。</p>
</li>
<li class="lvl-2">
<p><strong>脚本或配置文件获取</strong>: 在某些情况下，开发者可能会从 <a href="http://raw.githubusercontent.com">raw.githubusercontent.com</a> 直接拉取脚本或配置文件到本地，作为项目初始化的一部分或者是运行某些自动化任务的需要。</p>
</li>
<li class="lvl-2">
<p><strong>快速分享和集成代码片段</strong>: 开发者可能会分享一些示例代码或者配置文件的链接，其他用户可以直接通过这些链接查看或下载内容，便于快速集成或参考。</p>
</li>
<li class="lvl-2">
<p><strong>持续集成/部署脚本</strong>: 在 CI/CD 流程中，可能会使用此类链接来动态获取最新的脚本或配置，确保构建过程使用的是最新或指定版本的资源。</p>
</li>
</ul>
<p>其最显著的是我们在启动项目时，会自动将模拟器启动</p>
<p><strong>问题分析</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><font style="color:rgb(38, 38, 38);">为无法访问该域名的问题</font></p>
</li>
</ul>
<p><strong>解决方案</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>检查网络设置</p>
</li>
<li class="lvl-2">
<p>使用代理服务</p>
</li>
<li class="lvl-2">
<p>更换 DNS 服务器等方法来解决访问限制</p>
</li>
</ul>
<p>DNS 服务可能是 <strong>域名</strong> 与 <strong>ip</strong> 未绑定的原因</p>
<p>我们需要查看 <font style="color:#C75C00;background-color:rgb(249, 242, 244);">C:\Windows\System32\drivers\etc</font><code>里查看是否有</code><font style="color:rgb(199, 92, 0);">raw.githubusercontent.com</font> 与其对应的 <strong>ip</strong> 绑定，没有的话我们需要去查看 <font style="color:rgb(199, 92, 0);">raw.githubusercontent.com</font> 所对应的 <strong>ip</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>进入该网址 <a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a>，输入域名搜索<img data-src="/2024/10/13/RN%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/image.png" class="" title="RN问题解决"></p>
</li>
<li class="lvl-2">
<p>下图所框便是其对应的 <strong>ip</strong><img data-src="/2024/10/13/RN%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/image-1.png" class="" title="RN问题解决"></p>
</li>
<li class="lvl-2">
<p>在<font style="color:#C75C00;">C:\Windows\System32\drivers\etc</font> 里的 <font style="color:#C75C00;">hosts</font> 里最下面写入对应的配置，保存后重新创建项目</p>
</li>
</ul>
<blockquote>
<p>185.199.108.133 <a href="http://raw.githubusercontent.com">raw.githubusercontent.com</a></p>
<p>185.199.109.133 <a href="http://raw.githubusercontent.com">raw.githubusercontent.com</a></p>
<p>185.199.110.133 <a href="http://raw.githubusercontent.com">raw.githubusercontent.com</a></p>
<p>185.199.111.133 <a href="http://raw.githubusercontent.com">raw.githubusercontent.com</a></p>
</blockquote>
<h2 id="下载-gradle-x-x-all-zip-太慢">下载 <strong>gradle-x.x-all.zip 太慢</strong></h2>
<blockquote>
<p>Downloading <a href="https://services.gradle.org/distributions/gradle-8.6-all.zip">https://services.gradle.org/distributions/gradle-8.6-all.zip</a></p>
</blockquote>
<p><strong><font style="color:#000000;">解决方案</font></strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>配置镜像</p>
</li>
<li class="lvl-2">
<p>在 <font style="color:#C75C00;">[项目名]\android\gradle\wrapper\gradle-wrapper.properties</font> 中进行如下操作</p>
</li>
</ul>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">distributionBase=GRADLE_USER_HOME</span><br><span class="line">distributionPath=<span class="keyword">wrapper</span>/dists</span><br><span class="line"># 原网站下载</span><br><span class="line"># distributionUrl=https\://services.gradle.org/distributions/gradle<span class="number">-8.6</span>-<span class="keyword">all</span>.zip</span><br><span class="line"># 配置阿里镜像下载</span><br><span class="line">distributionUrl=https\://mirrors.aliyun.com/macports/distfiles/gradle/gradle<span class="number">-8.6</span>-<span class="keyword">all</span>.zip</span><br><span class="line"></span><br><span class="line">networkTimeout=<span class="number">10000</span></span><br><span class="line">validateDistributionUrl=<span class="keyword">true</span></span><br><span class="line">zipStoreBase=GRADLE_USER_HOME</span><br><span class="line">zipStorePath=<span class="keyword">wrapper</span>/dists</span><br></pre></td></tr></table></figure>
<p>配置好之后仍满可以试试多次重新执行启动项目命令，当进度明显快了就可以了，第一次可能有点慢，因为要安装 <font style="color:#C75C00;">gradle-8.6-all.zip</font></p>
<h2 id="依赖库下载太慢">依赖库下载太慢</h2>
<p><strong>解决方案</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p><font style="color:#C75C00;">[项目名]\android\build.gradle</font> 中 <font style="color:#C75C00;background-color:rgb(250, 250, 250);">repositories</font> <font style="color:rgb(38, 38, 38);background-color:rgb(250, 250, 250);">内有</font> <font style="color:#C75C00;background-color:rgb(250, 250, 250);">google()</font> <font style="color:rgb(38, 38, 38);background-color:rgb(250, 250, 250);">和</font> <font style="color:#C75C00;background-color:rgb(250, 250, 250);">mavenCentral()</font></p>
</li>
</ul>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">repositories</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">google</span>()</span></span><br><span class="line">    <span class="function"><span class="title">mavenCentral</span>()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul class="lvl-0">
<li class="lvl-2">
<p><strong>google()</strong>: 这一行指定了Google的Maven仓库作为依赖项的来源。这对于下载Android SDK相关依赖、Jetpack库以及其他Google提供的库非常关键。</p>
</li>
<li class="lvl-2">
<p><strong>mavenCentral()</strong>: 这一行指定了Maven中央仓库，它是Java开发中最常用的依赖库仓库，包含了大量开源库和框架。</p>
</li>
<li class="lvl-2">
<p>但由于这两个仓库的服务器都在国外，我们也需要对其进行镜像处理，有两种解决方案：</p>
<ul class="lvl-2">
<li class="lvl-6"><strong>局部配置</strong>：直接在 <font style="color:#DF2A3F;">build.gradle</font> 的 <font style="color:#DF2A3F;background-color:rgb(250, 250, 250);">repositories</font> <font style="color:rgb(38, 38, 38);background-color:rgb(250, 250, 250);">中修改</font></li>
<li class="lvl-6"><strong>全局配置</strong>： 在 <font style="color:#DF2A3F;">C:\Users[用户名].gradle</font> 文件夹下创建 <font style="color:#DF2A3F;">init.gradle</font> 文件，里面进行如下配置，这样我们就不需要每个项目都进行配置了</li>
</ul>
</li>
</ul>
<figure class="highlight fsharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 局部配置</span></span><br><span class="line"><span class="keyword">repositories</span> &#123;</span><br><span class="line">    <span class="keyword">maven</span> &#123; url <span class="symbol">&#x27;https</span><span class="operator">:</span><span class="comment">//maven.aliyun.com/repository/google&#x27; &#125;</span></span><br><span class="line">    <span class="keyword">maven</span> &#123; url <span class="symbol">&#x27;https</span><span class="operator">:</span><span class="comment">//maven.aliyun.com/repository/jcenter&#x27; &#125;</span></span><br><span class="line">    <span class="comment">// 此为阿里镜像下载源</span></span><br><span class="line">    <span class="keyword">maven</span> &#123; url <span class="symbol">&#x27;https</span><span class="operator">:</span><span class="comment">//mirrors.aliyun.com/macports/distfiles/gradle/&#x27; &#125;  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight roboconf"><table><tr><td class="code"><pre><span class="line">// 全局配置</span><br><span class="line">allprojects&#123;</span><br><span class="line">    <span class="attribute">repositories &#123;</span></span><br><span class="line"><span class="attribute">        def ALIYUN_REPOSITORY_URL = &#x27;https</span>://maven<span class="variable">.aliyun</span><span class="variable">.com</span>/repository/central/&#x27;</span><br><span class="line">        def ALIYUN_JCENTER_URL = &#x27;https://maven<span class="variable">.aliyun</span><span class="variable">.com</span>/repository/public/&#x27;</span><br><span class="line">        all &#123; ArtifactRepository repo -&gt;</span><br><span class="line">            if(repo instanceof MavenArtifactRepository)&#123;</span><br><span class="line">                def url = repo<span class="variable">.url</span><span class="variable">.toString</span>()</span><br><span class="line">                if (url<span class="variable">.startsWith</span>(&#x27;https://repo1<span class="variable">.maven</span><span class="variable">.org</span>/maven2&#x27;) || url<span class="variable">.startsWith</span>(&#x27;http://repo1<span class="variable">.maven</span><span class="variable">.org</span>/maven2&#x27;)) &#123;</span><br><span class="line">                    project<span class="variable">.logger</span><span class="variable">.lifecycle</span> &quot;Repository $&#123;repo<span class="variable">.url</span>&#125; replaced by $ALIYUN_REPOSITORY_URL.&quot;</span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">                if (url<span class="variable">.startsWith</span>(&#x27;https://jcenter<span class="variable">.bintray</span><span class="variable">.com</span>/&#x27;) || url<span class="variable">.startsWith</span>(&#x27;http://jcenter<span class="variable">.bintray</span><span class="variable">.com</span>/&#x27;)) &#123;</span><br><span class="line">                    project<span class="variable">.logger</span><span class="variable">.lifecycle</span> &quot;Repository $&#123;repo<span class="variable">.url</span>&#125; replaced by $ALIYUN_JCENTER_URL.&quot;</span><br><span class="line">                    remove repo</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        maven &#123;</span><br><span class="line">            url ALIYUN_REPOSITORY_URL</span><br><span class="line">            url ALIYUN_JCENTER_URL</span><br><span class="line">            url &#x27;https://maven<span class="variable">.aliyun</span><span class="variable">.com</span>/repository/google/&#x27;</span><br><span class="line">            url &#x27;https://maven<span class="variable">.aliyun</span><span class="variable">.com</span>/repository/gradle-plugin/&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    buildscript&#123;</span><br><span class="line">        repositories &#123;</span><br><span class="line">            def ALIYUN_REPOSITORY_URL = &#x27;https://maven<span class="variable">.aliyun</span><span class="variable">.com</span>/repository/central/&#x27;</span><br><span class="line">            def ALIYUN_JCENTER_URL = &#x27;https://maven<span class="variable">.aliyun</span><span class="variable">.com</span>/repository/public/&#x27;</span><br><span class="line">            all &#123; ArtifactRepository repo -&gt;</span><br><span class="line">                if(repo instanceof MavenArtifactRepository)&#123;</span><br><span class="line">                    def url = repo<span class="variable">.url</span><span class="variable">.toString</span>()</span><br><span class="line">                    if (url<span class="variable">.startsWith</span>(&#x27;https://repo1<span class="variable">.maven</span><span class="variable">.org</span>/maven2&#x27;) || url<span class="variable">.startsWith</span>(&#x27;http://repo1<span class="variable">.maven</span><span class="variable">.org</span>/maven2&#x27;)) &#123;</span><br><span class="line">                        project<span class="variable">.logger</span><span class="variable">.lifecycle</span> &quot;Repository $&#123;repo<span class="variable">.url</span>&#125; replaced by $ALIYUN_REPOSITORY_URL.&quot;</span><br><span class="line">                        remove repo</span><br><span class="line">                    &#125;</span><br><span class="line">                    if (url<span class="variable">.startsWith</span>(&#x27;https://jcenter<span class="variable">.bintray</span><span class="variable">.com</span>/&#x27;) || url<span class="variable">.startsWith</span>(&#x27;http://jcenter<span class="variable">.bintray</span><span class="variable">.com</span>/&#x27;)) &#123;</span><br><span class="line">                        project<span class="variable">.logger</span><span class="variable">.lifecycle</span> &quot;Repository $&#123;repo<span class="variable">.url</span>&#125; replaced by $ALIYUN_JCENTER_URL.&quot;</span><br><span class="line">                        remove repo</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            maven &#123;</span><br><span class="line">                url ALIYUN_REPOSITORY_URL</span><br><span class="line">                url ALIYUN_JCENTER_URL</span><br><span class="line">                url &#x27;https://maven<span class="variable">.aliyun</span><span class="variable">.com</span>/repository/google/&#x27;</span><br><span class="line">                url &#x27;https://maven<span class="variable">.aliyun</span><span class="variable">.com</span>/repository/gradle-plugin/&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<h2 id="调试断开后设备上打开报错">调试断开后设备上打开报错</h2>
<p>当我们启动程序并连上设备后，我们可以看到页面资源，但当我们断开后再打开就会报错 <font style="color:#DF2A3F;"><strong>Unable to load script…</strong></font>，是因为我们的 <strong>JS代码和静态资源</strong> 并没有集成到Android项目中进行构建和发布</p>
<p><strong>解决方案</strong></p>
<ul class="lvl-0">
<li class="lvl-2">
<p>在 <font style="color:#DF2A3F;">[项目名]\android\app\src\main\</font> 目录下创建 <font style="color:#DF2A3F;">assets</font> 文件夹，并在下面创建 <font style="color:#DF2A3F;">index.android.bundle</font> 文件</p>
</li>
<li class="lvl-2">
<p>然后在控制台<strong>项目根目录</strong>运行命令 <font style="color:#DF2A3F;">npx react-native bundle --platform android --dev false --entry-file index.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res</font></p>
</li>
<li class="lvl-2">
<p>当我们再次运行时，即使断开我们也可以看到我们的资源</p>
</li>
</ul>
<h2 id="error-Error-connect-ETIMEDOUT-185-199-108-133-443">error Error: connect ETIMEDOUT 185.199.108.133:443</h2>
<p>过段时间重新尝试安装</p>
<h2 id="error-unknown-command-‘run-android’">error: unknown command ‘run-android’</h2>
<p>依赖包删除重新 <code>npm i</code> 或 <code>yarn</code></p>
]]></content>
      <categories>
        <category>前端</category>
        <category>APP</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>SASS星空</title>
    <url>/2024/10/15/SASS%E6%98%9F%E7%A9%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>效果图</strong></p>
<img data-src="/2024/10/15/SASS%E6%98%9F%E7%A9%BA/preview.gif" class="" title="SASS星空">
<p>盒子的阴影可以设置多个，所以我们可以通过阴影实现星光的效果，但纯写 css 过于抽象，我们可以利用 sass 的循环语法、函数与变量编写</p>
<p><strong>HTML结构</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./index.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里只设置三个层级,可以根据需要自己添加 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Sass 星空<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>SASS代码</strong><br>
提示：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>对SASS的编译不要用 VScode 的插件：easy sass，可能会出现函数识别导致编译失败的问题</p>
</li>
<li class="lvl-2">
<p>可以在 node 环境下，安装 sass：<code>npm i sass</code></p>
</li>
<li class="lvl-2">
<p>后执行 <code>npx sass [sass文件路径] [编译转换后的css输出文件路径] --no-source-map -w</code></p>
</li>
</ul>
<blockquote>
<p>npx sass index.scss index.css --no-source-map -w</p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>npx：暂时把 sass 加入环境变量中，仅在此命令行操作有效</p>
</li>
<li class="lvl-2">
<p>sass：安装 sass 自带的执行命令</p>
</li>
<li class="lvl-2">
<p>–no-source-map：取消源映射，source-map里面存放着sass与css的映射信息，通过此命令可以取消该文件的生成</p>
</li>
<li class="lvl-2">
<p>-w：监听sass/scss的文件内容变化，自动更新生成的css</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 背景底色</span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    radial-gradient 是 CSS3 中用于创建径向渐变背景的属性。</span></span><br><span class="line"><span class="comment">    ellipse at bottom 指定了渐变形状为椭圆，并且椭圆的底部与元素的底部对齐。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(ellipse at bottom, <span class="number">#1b2735</span> <span class="number">0%</span>, <span class="number">#090a0f</span> <span class="number">100%</span>);</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;lato&quot;</span>, sans-serif;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">300</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line">  // 渐变背景，将文本背景设置为透明，并设置背景颜色为 <span class="selector-id">#38495a</span></span><br><span class="line">  // 即将文字展示为背景颜色</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(white, <span class="number">#38495a</span>);</span><br><span class="line">  -webkit-<span class="attribute">background-clip</span>: text;</span><br><span class="line">  <span class="attribute">background-clip</span>: text;</span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建星光（阴影）函数</span><br><span class="line"><span class="keyword">@function</span> createShadow($n) &#123;</span><br><span class="line">  // 定义阴影变量  </span><br><span class="line">  $shadow: <span class="string">&quot;#&#123;random($limit: 100)&#125;vw #&#123;random($limit: 100)&#125;vh #fff&quot;</span>;</span><br><span class="line">  <span class="keyword">@for</span> $i from <span class="number">2</span> through $n &#123;</span><br><span class="line">    // 每次循环向 $shadow 中添加新的阴影</span><br><span class="line">    $shadow: <span class="string">&quot;#&#123;$shadow&#125;, #&#123;random($limit: 100)&#125;vw #&#123;random($limit: 100)&#125;vh #fff&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  // unquote() 函数用于将字符串转换为 CSS 属性值，即去掉字符串</span><br><span class="line">  <span class="keyword">@return</span> unquote($shadow);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义星光（阴影）初始数量</span><br><span class="line">$count: <span class="number">1000</span>;</span><br><span class="line">// 定义动画初始时间</span><br><span class="line">$duration: <span class="number">400s</span>;</span><br><span class="line"><span class="keyword">@for</span> $i from <span class="number">1</span> through <span class="number">3</span> &#123;</span><br><span class="line">  // 每次循环时将数量和动画时间减半，以达到不同层级的动画效果</span><br><span class="line">  $count: <span class="built_in">floor</span>(<span class="built_in">calc</span>($count / <span class="number">2</span>));</span><br><span class="line">  $duration: <span class="built_in">floor</span>(<span class="built_in">calc</span>($duration / <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">  // 输出调试信息</span><br><span class="line">  <span class="keyword">@debug</span> <span class="string">&quot;count #&#123;$count&#125;&quot;</span>;</span><br><span class="line">  <span class="keyword">@debug</span> <span class="string">&quot;duration #&#123;$duration&#125;&quot;</span>;</span><br><span class="line">  // 创建层级的样式</span><br><span class="line">  <span class="selector-class">.layer</span>#&#123;$<span class="selector-tag">i</span>&#125; &#123;</span><br><span class="line">    $size: #&#123;$<span class="selector-tag">i</span>&#125;px;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">width</span>: $size;</span><br><span class="line">    <span class="attribute">height</span>: $size;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f40</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="built_in">createShadow</span>($count);</span><br><span class="line">    <span class="attribute">animation</span>: moveUp $duration linear infinite;</span><br><span class="line">    // 为了动画的流畅和无缝衔接，在 &amp;<span class="selector-pseudo">::after</span> 中设置相同的参数</span><br><span class="line">    &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="attribute">position</span>: fixed;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">100vh</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">width</span>: inherit;</span><br><span class="line">      <span class="attribute">height</span>: inherit;</span><br><span class="line">      <span class="attribute">box-shadow</span>: inherit;</span><br><span class="line">      <span class="attribute">background</span>: inherit;</span><br><span class="line">      <span class="attribute">border-radius</span>: inherit;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 移动动画</span><br><span class="line"><span class="keyword">@keyframes</span> moveUp &#123;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">100vh</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
        <category>页面</category>
      </categories>
      <tags>
        <tag>SASS</tag>
        <tag>CSS</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>vite 环境变量配置文件</title>
    <url>/2024/10/18/vite%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>前提文档链接</strong></p>
<p>Vite 环境变量和模式文档：<a href="https://vitejs.cn/vite3-cn/guide/env-and-mode.html#env-files">https://vitejs.cn/vite3-cn/guide/env-and-mode.html#env-files</a></p>
<hr>
<span id="more"></span>
<h2 id="开发环境与配置文件">开发环境与配置文件</h2>
<p>在项目开发中，我们往往需要在不同环境下使用不同的配置，比如开发环境、测试环境、生产环境等。</p>
<p>在项目开发中，常见的环境有</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>dev</code> – 开发环境，外部用户无法访问，开发人员使用，版本变动大。</p>
</li>
<li class="lvl-2">
<p><code>prod</code> – 生产环境，面向外部用户的环境，正式环境。</p>
</li>
<li class="lvl-2">
<p><code>test</code> – 测试环境，外部用户无法访问，专门给测试人员使用的，版本相对稳定。</p>
</li>
<li class="lvl-2">
<p><code>sit (System Integration Test)</code> – 集成环境，系统集成测试，开发人员自己测试流程是否走通。</p>
</li>
<li class="lvl-2">
<p><code>uat (User Acceptance Test environment)</code> – 用户验收测试环境，主要面向要交付的人员进行验证测试。</p>
</li>
<li class="lvl-2">
<p><code>pre</code> – 灰度环境，外部用户可以访问，但是服务器配置相对低，其它和生产一样。</p>
</li>
<li class="lvl-2">
<p><code>fat (Feature Acceptance Test environment)</code> – 功能验收测试环境，用于软件测试者测试使用。在以 <a href="https://vitejs.cn/">Vite</a> 作为构建工具开发项目时，环境变量配置文件名为 <code>.env</code>，文件名后缀为 <code>.env.[mode]</code>，其中 <code>mode</code> 为环境名称，如 <code>dev</code>、<code>prod</code>、<code>test</code> 等。</p>
</li>
</ul>
<p>根据 <code>mode</code> 的不同，可以配置不同的环境变量，例如</p>
<blockquote>
<p>.env.development<br>
.env.production<br>
.env.test</p>
</blockquote>
<p>默认情况下，Vite 会自动读取 <code>.env</code> 文件（通用配置），并根据 <code>NODE_ENV</code> 的值来确定当前环境。</p>
<p>但对于一份指定模式的文件（例如 .env.production）会比通用形式的优先级更高（例如 .env）。且相同的配置项，指定模式的文件会覆盖通用配置。</p>
<p>虽说环境有多种，但真正的开发模式只有两种</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>development</code>：开发模式下</p>
</li>
<li class="lvl-2">
<p><code>production</code>：生产模式下</p>
</li>
</ul>
<p>我们可以在不同的开发模式下配置多种环境，基于这种情况下，又习惯性的把 <code>开发环境</code> 和 <code>生产环境</code> 作为主环境，而在主环境下配置各种子环境，显示的把开发模式指定出来，便于开发人员理解，基于此，有些项目的环境目录会出现以下情况</p>
<blockquote>
<p>.env.development<br>
.env.development.sit<br>
.env.production<br>
.env.production.uat</p>
</blockquote>
<h2 id="环境变量">环境变量</h2>
<p>在 Vite 中，环境变量的命名规则默认为 <code>VITE_</code> 开头，例如 <code>VITE_API_URL</code>。</p>
<p><strong>官方解释</strong></p>
<blockquote>
<p>为了防止意外地将一些环境变量泄漏到客户端，只有以 VITE_ 为前缀的变量才会暴露给经过 vite 处理的代码。例如下面这些环境变量：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">VITE_SOME_KEY</span>=<span class="number">123</span></span><br><span class="line"><span class="attr">DB_PASSWORD</span>=foobar</span><br></pre></td></tr></table></figure>
<p>只有 VITE_SOME_KEY 会被暴露为 import.meta.env.VITE_SOME_KEY 提供给客户端源码，而 DB_PASSWORD 则不会。</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="keyword">import</span>.meta.env.VITE_SOME_KEY) <span class="comment">// 123</span></span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(<span class="keyword">import</span>.meta.env.DB_PASSWORD) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
</blockquote>
<p>如果修改默认前缀，请参阅 <a href="https://vitejs.cn/vite3-cn/config/shared-options.html#envprefix">envprefix</a>。</p>
<h3 id="环境变量的使用">环境变量的使用</h3>
<p>在项目中，有些公共部分是需要我们抽离出来，作为环境变量进行配置，例如：<code>API_BASE_URL</code>，<code>ROUTE_BASE_URL</code>等等。</p>
<p>我们可以在 <code>.env.[mode]</code> 配置文件中填写</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">VITE_APP_API_URL</span>=http://x.x.x.x:xx</span><br><span class="line"><span class="attr">VITE_ROUTE_BASE_URL</span>=/xxx</span><br></pre></td></tr></table></figure>
<p>在项目中，我们可以通过 <code>import.meta.env.[变量名]</code> 来获取这些环境变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_APP_API_URL</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">VITE_ROUTE_BASE_URL</span>)</span><br></pre></td></tr></table></figure>
<h3 id="指定开发环境">指定开发环境</h3>
<p>我们可以通过获取这些环境变量以达到不同环境下使用不同变量的功能，但我们如何确定当前环境或者当前模式呢？</p>
<h4 id="指定开发环境的模式">指定开发环境的模式</h4>
<p>开发环境的模式需要在配置文件中配置 <code>NODE_ENV</code> 变量，Vite 会自动读取该变量，并根据该变量的值来确定当前开发模式，默认为 <code>development</code>。</p>
<p><code>NODE_ENV</code> 有两个值：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>development</code>：开发模式</p>
</li>
<li class="lvl-2">
<p><code>production</code>：生产模式</p>
</li>
</ul>
<p>在有些时候，我们不需要进行显示的配置，Vite 内部会自动根据当前环境来确定开发模式。例如：</p>
<blockquote>
<p>默认情况下，开发服务器 (dev 命令) 运行在 development (开发) 模式，而 build 命令（打包命令）则运行在 production (生产) 模式。</p>
<p>这意味着当执行 vite build 时，它会自动加载 .env.production 中可能存在的环境变量。 ————<a href="https://vitejs.cn/vite3-cn/guide/env-and-mode.html#env-files">官方解释</a></p>
</blockquote>
<h4 id="指定环境类型">指定环境类型</h4>
<p>在上文我们提到了 <code>.env.[mode]</code> ，我们只需要改写 <code>mode</code> 值便可实现环境的创建，在真实情况下，<code>mode</code> 可以是任意值，但为了避免混淆，我们可以遵循以上的软规定。</p>
<p>通过改变 mode 的值便可创建一个环境，但除了 <code>.env.development</code> 和 .<code>env.production</code> 可以被 Vite 自动识别在 dev命令 和 build 命令情况下读取变量外，其他的 mode 配置只会根据 <code>NODE_ENV</code> 的值来识别其对应的配置文件。</p>
<p>我们还需要在启动命令中进行模式指定，在项目根目录的 <code>package.json</code> 中的执行脚本 <code>script</code> 中添加一条命令，如</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dev-test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite --mode test&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>
<p>通过指定 <code>--mode</code> 参数，Vite 就会根据当前启动命令指定的模式来加载对应的 Vite 项目中 <code>.env.[mode]</code> mode 指定的配置文件。</p>
<h4 id="示例">示例</h4>
<p>在 <code>.env.development</code> 中配置</p>
<img data-src="/2024/10/18/vite%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/image-2.png" class="" title="vite 环境变量配置文件">
<p>我在封装的请求模块中引用 <code>VITE_APP_API_URL</code> 变量</p>
<img data-src="/2024/10/18/vite%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/image-1.png" class="" title="vite 环境变量配置文件">
<p>通过 <code>npm run dev</code> 启动项目，在网络请求中的 <code>baseURL</code> 显示为 <code>http://10.111.11.11:8080</code></p>
<img data-src="/2024/10/18/vite%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/image-3.png" class="" title="vite 环境变量配置文件">
<p>我们更换环境</p>
<p>在 <code>.env.test</code> 中配置</p>
<img data-src="/2024/10/18/vite%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/image-4.png" class="" title="vite 环境变量配置文件">
<p>在 <code>package.json</code> 中添加一条命令</p>
<img data-src="/2024/10/18/vite%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/image-5.png" class="" title="vite 环境变量配置文件">
<p>运行 <code>npm run dev-test</code>，在网络请求中的 <code>baseURL</code> 显示为 <code>http://10.122.22.22:8001</code></p>
<img data-src="/2024/10/18/vite%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/image-6.png" class="" title="vite 环境变量配置文件">
<h4 id="注意事项">注意事项</h4>
<p>当前 <code>Vite</code> 版本执行打包命令时，如果在 <code>.env,production</code> 中指定了 <code>NODE_ENV:production</code>，会报错，只需把该配置删除即可，打包时还是会读取 <code>.env,production</code> 的配置。</p>
]]></content>
      <categories>
        <category>前端</category>
        <category>工程化</category>
      </categories>
      <tags>
        <tag>vite</tag>
      </tags>
  </entry>
  <entry>
    <title>创建RN项目</title>
    <url>/2024/10/13/%E5%88%9B%E5%BB%BARN%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1>Android 开发环境</h1>
<ul class="lvl-0">
<li class="lvl-2">配置 Android 环境，请跟着<a href="https://reactnative.cn/docs/0.74/getting-started">文档</a>(0.74版本)进行</li>
</ul>
<span id="more"></span>
<h1>创建新项目</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>如果你之前全局安装过旧的react-native-cli命令行工具，请使用<code>npm uninstall -g react-native-cli</code>卸载掉它以避免一些冲突：<code>npm uninstall -g react-native-cli @react-native-community/cli</code></p>
</li>
<li class="lvl-2">
<p>输入以下命令创建新项目<code>npx react-native@latest init [项目名]</code></p>
</li>
</ul>
<h1>创建项目指定版本号：[可选参数] 指定版本或项目模板</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>你可以使用–version参数（注意是两个杠）创建指定版本的项目。注意版本号必须精确到两个小数点：<code>npx react-native@X.XX.X init AwesomeProject --version X.XX.X</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
        <category>APP</category>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题-类型判断（补充中）</title>
    <url>/2024/10/16/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-typeof-与-instanceof-类型判断">1. <code>typeof</code> 与 <code>instanceof</code> 类型判断</h2>
<details>
   <summary>
      <span>查看</span>
   </summary>
<blockquote>
<p><code>typeof</code> 是否能正确判断类型？<code>instanceof</code>能否正确判断对象的原理是什么？</p>
</blockquote>
<p><code>typeof</code> 对于原始类型来说，除了 <code>null</code> 都可以显示正确的类型。判断 <code>null</code> 对应的结果为 <code>object</code>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">1</span>); <span class="comment">// number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;1&quot;</span>); <span class="comment">// string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>); <span class="comment">// boolean</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Symbol</span>()); <span class="comment">// symbol</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">10n</span>); <span class="comment">// bigint</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">// object</span></span><br></pre></td></tr></table></figure>
<img data-src="/2024/10/16/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/image.png" class="" title="typeof 与 instanceof 类型判断">
<p><code>typeof</code> 对于对象来说，除了函数都会显示 <code>object</code>，所以说 <code>typeof</code> 不能准确判断对象的类型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> []); <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123;&#125;); <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;); <span class="comment">// function</span></span><br></pre></td></tr></table></figure>
<img data-src="/2024/10/16/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/image-1.png" class="" title="typeof 与 instanceof 类型判断">
<p>所以 <code>typeof</code> 不能正确判断类型。</p>
<blockquote>
<p>如果我们想判断一个对象的正确类型，我们可以考虑使用 <code>instanceof</code>，因为内部机制是通过原型链来判断的。但对于原始数据类型，使用 <code>instanceof</code> 是无法判断的。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1 <span class="keyword">instanceof</span> <span class="title class_">Person</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str <span class="keyword">instanceof</span> <span class="title class_">String</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<img data-src="/2024/10/16/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98-%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/image-2.png" class="" title="typeof 与 instanceof 类型判断">
<div class="warning">
<p><strong>注意：</strong><br>
<code>instanceof</code> 可以判断对象的正确类型，但由于原型链的关系，对于其类型的父类进行判断也是返回 <code>true</code>。</p>
</div>
<h3 id="手动实现-function-isInstanceOf-child-Parent">手动实现 function isInstanceOf(child,Parent)</h3>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isInstanceof</span>(<span class="params">Child, Parent</span>) &#123;</span><br><span class="line">   <span class="comment">// 取右表达式的 prototype 值</span></span><br><span class="line">   <span class="keyword">let</span> <span class="title class_">ParentProto</span> = <span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">   <span class="comment">// 取左表达式的__proto__值</span></span><br><span class="line">   <span class="title class_">Child</span> = <span class="title class_">Child</span>.<span class="property">__proto__</span>;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">ParentProto</span>);</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Child</span>);</span><br><span class="line">   <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="title class_">Child</span> === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">         <span class="keyword">if</span> (<span class="title class_">Child</span> === <span class="title class_">ParentProto</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">         <span class="title class_">Child</span> = <span class="title class_">Child</span>.<span class="property">__proto__</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开始测试</span></span><br><span class="line"><span class="keyword">var</span> a = []</span><br><span class="line"><span class="keyword">var</span> b = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="title class_">Foo</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">child</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">father</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">child.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">father</span>()</span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="title function_">child</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isInstanceof</span>(a, <span class="title class_">Array</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isInstanceof</span>(b, <span class="title class_">Object</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isInstanceof</span>(b, <span class="title class_">Array</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isInstanceof</span>(a, <span class="title class_">Object</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isInstanceof</span>(c, <span class="title class_">Foo</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isInstanceof</span>(d, child)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isInstanceof</span>(d, father)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</details>
<h2 id="2-、-、Object-is-的区别">2. <code>==</code> 、<code>===</code> 、<code>Object.is()</code> 的区别</h2>
<h3 id=""><code>==</code></h3>
<details>
<summary>查看</summary>
相等（==）运算符（宽松比较）检查其两个操作数是否相等，返回一个布尔值结果。当比较双方数据类型不同时，它会尝试转换不同类型的操作数，并进行比较
<h4 id="比较规则"><code>==</code> 比较规则</h4>
<ol>
<li class="lvl-3">
<p>如果操作数具有相同的类型，则按如下方式进行比较：</p>
<ul class="lvl-2">
<li class="lvl-5">对象（Object）：仅当两个操作数引用同一个对象时返回 true。</li>
<li class="lvl-5">字符串（String）：仅当两个操作数具有相同的字符且顺序相同时返回 true。</li>
<li class="lvl-5">数字（Number）：如果两个操作数的值相同，则返回 true。+0 和 -0 被视为相同的值。如果任何一个操作数是 NaN，返回 false；所以，<mark>NaN 永远不等于 NaN</mark>。</li>
<li class="lvl-5">布尔值（Boolean）：仅当操作数都为 true 或都为 false 时返回 true。</li>
<li class="lvl-5">大整型（BigInt）：仅当两个操作数的值相同时返回 true。</li>
<li class="lvl-5">符号（Symbol）：仅当两个操作数引用相同的符号时返回 true。</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="title class_">NaN</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="title class_">NaN</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == b); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>如果其中一个操作数为 null 或 undefined，另一个操作数也必须为 null 或 undefined 以返回 true。否则返回 false。（null 和 undefined 除了与null 和 undefined 比较为 true，其他值都返回 false）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> d = <span class="literal">undefined</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == b); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == c); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b == d); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == d); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-3">
<p>如果其中一个操作数是对象，另一个是原始值，则将对象转换为原始值。</p>
<ul class="lvl-2">
<li class="lvl-6">在这一步，两个操作数都被转换为原始值（字符串、数字、布尔值、符号和大整型中的一个）。剩余的转换将分情况完成。
<ul class="lvl-4">
<li class="lvl-8">如果是相同的类型，使用步骤 1 进行比较。</li>
<li class="lvl-8">如果其中一个操作数是符号(Symbol)而另一个不是，返回 false。</li>
<li class="lvl-8">如果其中一个操作数是布尔值而另一个不是，则将布尔值转换为数字：<mark>true 转换为 1，false 转换为 0</mark>。然后再次对两个操作数进行宽松比较。</li>
<li class="lvl-8">数字与字符串：<mark>将字符串转换为数字</mark>。转换失败将导致 NaN，这将保证相等比较为 false。</li>
<li class="lvl-8">数字与大整型：按数值进行比较。如果数字的值为 ±∞ 或 NaN，返回 false。</li>
<li class="lvl-8">字符串与大整型：<mark>使用与 BigInt() 构造函数相同的算法将字符串转换为大整型数</mark>。如果转换失败，返回 false。</li>
</ul>
</li>
</ul>
</li>
</ol>
<div class="tips">
<p><strong>对象转为原始值</strong><br>
对象将依次调用它的 <code>[Symbol.toPrimitive]()</code>（将 default 作为 hint 值）、valueOf() 和 toString() 方法，将其转换为原始值。<mark>注意，原始值转换会在 toString() 方法之前调用 valueOf() 方法</mark>。<br>
<code>[Symbol.toPrimitive]()</code> 方法，如果存在，则必须返回原始值，返回对象，会导致 TypeError。<mark>对于 valueOf() 和 toString()，如果其中一个返回对象，则忽略其返回值，从而使用另一个的返回值；如果两者都不存在，或者两者都没有返回一个原始值，则抛出 TypeError</mark>。</p>
</div>
<p><strong>示例</strong></p>
<p>定义一个干净的对象</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a[<span class="title class_">Symbol</span>.<span class="property">toPrimitive</span>]); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">toString</span>()); <span class="comment">// [object Object]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">valueOf</span>()); <span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure>
<p>实现该对象的<code>[Symbol.toPrimitive]</code>方法，使其返回一个原始值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">   [<span class="title class_">Symbol</span>.<span class="property">toPrimitive</span>](hint) &#123;</span><br><span class="line">         <span class="keyword">if</span> (hint === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">42</span></span><br><span class="line">         &#125;<span class="keyword">else</span> <span class="keyword">if</span> (hint === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">   &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处运用了隐式转换 导致使用强制数字类型转换算法 使得能满足 hint===&#x27;number&#x27; 条件        </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(+a == <span class="number">42</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 此处 new String 导致使用强制字符串类型转换算法 使得能满足 hint===&#x27;string&#x27; 条件 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">String</span>(a) == <span class="string">&#x27;abc&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == <span class="literal">null</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<div class="warning">
<p><strong>注意</strong><br>
当未对对象使用强制类型转换时，会返回默认值。但<code>Symbol.toPrimitive</code> 返回的 null 或 undefined 与 null 和 undefined 进行宽松比较(==)时仍为 false，hint 值是 number 时，返回的必须是数字字符串或数字，否则与数字或数字字符串进行宽松比较时仍为 false</p>
</div>
<div class="tips">
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date">Date</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date">Symbol</a> 对象是唯一重写 <code>[Symbol.toPrimitive]()</code> 方法的对象。</p>
<p>对于 Date，如果 hint 是 “string” 或 “default”，<code>[Symbol.toPrimitive]()</code> 将会调用 toString。如果 toString 属性不存在，则调用 valueOf。如果 valueOf 也不存在，则抛出一个TypeError。</p>
<p>对于 Symbol，hint 参数未使用时，Symbol 的 <code>[Symbol.toPrimitive]()</code> 方法返回 Symbol 对象的原始值作为数据类型返回。</p>
</div>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sym = <span class="title class_">Symbol</span>(<span class="string">&quot;example&quot;</span>);</span><br><span class="line">sym === sym[<span class="title class_">Symbol</span>.<span class="property">toPrimitive</span>](); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>当对象不存在<code>Symbol.toPrimitive</code>时，会根据 <code>toString()</code> 和 <code>valueOf()</code> 的返回值作为原始值进行比较。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">      <span class="title function_">valueOf</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">42</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(a == <span class="number">42</span>); <span class="comment">// true</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(a == <span class="string">&#x27;abc&#x27;</span>); <span class="comment">// false</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">String</span>(a) == <span class="string">&#x27;abc&#x27;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<div class="tips">
<p>一般来说，valueOf 的优先级高于 toString。但当其使用强制字符串类型转换时，会根据 toString 的返回值作为原始值进行比较。</p>
</div>
</details>
<h3 id="-2"><code>===</code></h3>
<details>
<summary>查看</summary>
严格相等（===）运算符与 == 运算符之间最显著的区别是，严格相等运算符不尝试类型转换。相反，严格相等运算符总是认为不同类型的操作数是不同的，即只要类型不同进行 `===` 操作时，结果即为 `false`。严格相等运算符本质上只执行第 1 步，然后对所有其他情况返回 `false`。
<div class="warning">
<p>上面的算法有一个“故意违反”：如果其中一个操作数是 document.all，则它被视为 undefined。这意味着 document.all == null 是 true，但 document.all === undefined &amp;&amp; document.all === null 是 false。 —— <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Equality">MDN文章描述</a></p>
</div>
<h4 id="比较规则-2"><code>===</code> 比较规则</h4>
<ul class="lvl-0">
<li class="lvl-2">
<p>如果操作数的类型不同，则返回 false。</p>
</li>
<li class="lvl-2">
<p>如果两个操作数都是对象，只有当它们指向同一个对象时才返回 true。</p>
</li>
<li class="lvl-2">
<p>如果两个操作数都为 null，或者两个操作数都为 undefined，返回 true。</p>
</li>
<li class="lvl-2">
<p>如果两个操作数有任意一个为 NaN，返回 false。</p>
</li>
<li class="lvl-2">
<p>否则，比较两个操作数的值：</p>
<ul class="lvl-2">
<li class="lvl-4"><mark>数字类型必须拥有相同的数值。+0 和 -0 会被认为是相同的值。</mark></li>
<li class="lvl-4">字符串类型必须拥有相同顺序的相同字符。</li>
<li class="lvl-4">布尔运算符必须同时为 true 或同时为 false。</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(-<span class="number">0</span> === +<span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> === -<span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
</details>
<h3 id="Object-is"><code>Object.is()</code></h3>
<details>
<summary>查看</summary>
<p><code>Object.is()</code> 静态方法确定两个值是否为相同值。</p>
<h4 id="Object-is-的比较规则"><code>Object.is()</code>的比较规则</h4>
<p>如果出现以下几种情况，则返回 true，即比较的两个值相同</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>都是 undefined</p>
</li>
<li class="lvl-2">
<p>都是 null</p>
</li>
<li class="lvl-2">
<p>都是 true 或者都是 false</p>
</li>
<li class="lvl-2">
<p>都是长度相同、字符相同、顺序相同的字符串</p>
</li>
<li class="lvl-2">
<p>都是相同的对象（意味着两个值都引用了内存中的同一对象）</p>
</li>
<li class="lvl-2">
<p>都是 BigInt 且具有相同的数值</p>
</li>
<li class="lvl-2">
<p>都是 symbol 且引用相同的 symbol 值</p>
</li>
<li class="lvl-2">
<p>都是数字且</p>
<ul class="lvl-2">
<li class="lvl-4">都是 +0</li>
<li class="lvl-4">都是 -0</li>
<li class="lvl-4">都是 NaN</li>
<li class="lvl-4">都有相同的值，非零且都不是 NaN</li>
</ul>
</li>
</ul>
<p><code>Object.is()</code> 与 == 运算符并不等价。== 运算符在测试相等性之前，会对两个操作数进行类型转换（如果它们不是相同的类型），这可能会导致一些非预期的行为，例如 “” == false 的结果是 true，但是 <code>Object.is()</code> 不会对其操作数进行类型转换。</p>
<p><code>Object.is()</code> 也不等价于 === 运算符。<code>Object.is()</code> 和 === 之间的<mark>唯一区别在于它们处理带符号的 0 和 NaN 值的时候</mark>。=== 运算符（和 == 运算符）将数值 -0 和 +0 视为相等，但是会将 NaN 视为彼此不相等。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">0</span>, -<span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>, -<span class="number">0</span>); <span class="comment">// false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(-<span class="number">0</span>, -<span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="number">0</span> / <span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">Number</span>.<span class="property">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</details>
<h3 id="总结">总结</h3>
<div class="tips">
<p>对于 <code>==</code>，主要特点就是类型转换，而 <code>===</code> 和 <code>Object.is()</code> 则不进行类型转换。</p>
<p>对于 <code>===</code>，主要特点就是严格相等，类型不同就是 <code>false</code>，与 <code>==</code> 类型相同时比较规则一致。</p>
<p>对于 <code>Object.is()</code>，主要特点就是严格相等，类型不同就是 <code>false</code>，与 <code>==</code> 类型相同时比较规则一致。但与 <code>===</code> 不同的是，<code>Object.is()</code> 对于 0 和 -0、NaN 的处理不同，<code>Object.is()</code> 将数值 -0 和 +0 视为彼此不相等，但是会将 NaN 视为彼此相等，<code>===</code> 将数值 -0 和 +0 视为相等，但是会将 NaN 视为彼此不相等。</p>
</div>
<h2 id="全局-isNaN-和-Number-isNaN">全局 <code>isNaN()</code> 和  <code>Number.isNaN()</code></h2>
<details>
<summary>查看</summary>
<ul class="lvl-0">
<li class="lvl-2">
<p><code>isNaN()</code> 函数用来确定一个值是否为 NaN，若有必要，则首先将值转换为数字。</p>
</li>
<li class="lvl-2">
<p><code>Number.isNaN()</code> 静态方法判断传入的值是否为 NaN，如果输入不是数字类型，则返回 false。它是全局 <code>isNaN()</code> 函数更健壮的版本。</p>
</li>
</ul>
<p><code>isNaN()</code> 是全局对象的一个函数属性。对于数字值，<code>isNaN()</code> 检测该值是否为 NaN 值。当 <code>isNaN()</code> 函数的参数不是数字类型时，其会首先被转换为数字，然后将其结果值与 NaN 进行比较</p>
<p><code>isNaN()</code> 对于非数字参数的行为可能会令人困惑！例如，空字符串被强制转换为 0，布尔值被强制转换为 0 或 1；直观上，两者均“不是数字”，仅因它们的运算结果不是 NaN，而使得 <code>isNaN()</code> 返回 false。因此，<code>isNaN()</code> 既不回答“输入是否为浮点数值 NaN”，也不回答“输入是否为数字”这两个问题。</p>
<p>Number.isNaN() 是检测一个值是否为数字值 NaN 的更可靠的方法。或者，也可以使用表达式 x !== x，这两种方法都不会产生全局 isNaN() 不可靠的误判。要检测一个值是否为数字，请使用 typeof x === “number”。</p>
<h3 id="Number-isNaN-和全局-isNaN-之间的区别">Number.isNaN() 和全局 isNaN() 之间的区别</h3>
<p>Number.isNaN() 不会尝试将参数转换为数字，因此非数字总是返回 false。以下都返回 false：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&quot;NaN&quot;</span>); </span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="literal">undefined</span>);</span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(&#123;&#125;);</span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&quot;blabla&quot;</span>);</span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="literal">true</span>);</span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&quot;37&quot;</span>);</span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&quot;37.37&quot;</span>);</span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&quot; &quot;</span>);</span><br></pre></td></tr></table></figure>
<p>全局 isNaN() 函数会将参数强制转换为数字：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(<span class="string">&quot;NaN&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">undefined</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">isNaN</span>(&#123;&#125;); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&quot;blabla&quot;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">true</span>); <span class="comment">// false，强制转换为 1</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">null</span>); <span class="comment">// false，强制转换为 0</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&quot;37&quot;</span>); <span class="comment">// false，强制转换为 37</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&quot;37.37&quot;</span>); <span class="comment">// false，强制转换为 37.37</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// false，强制转换为 0</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&quot; &quot;</span>); <span class="comment">// false，强制转换为 0</span></span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>前端</category>
        <category>面经</category>
        <category>类型判断</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序-学习笔记（学习中）</title>
    <url>/2024/10/15/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="1-图片懒加载没生效问题">1. 图片懒加载没生效问题</h2>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/assets/xxx.png&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;&quot;</span> <span class="attr">show-menu-by-longpress</span> <span class="attr">lazy-load</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<img data-src="/2024/10/15/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image.png" class="" title="图片懒加载没生效问题">
<p>lazy-load的图片不是出现在屏幕上才会开始加载，而是提前3个屏幕高度就会加载。所以说三个屏幕高度以内的图片是不会懒加载的，上下三屏即为三个屏幕高度。</p>
<h2 id="2-text-组件">2. text 组件</h2>
<img data-src="/2024/10/15/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-1.png" class="" title="text 组件">
<h2 id="3-navigator组件中的-open-type">3. navigator组件中的 open-type</h2>
<img data-src="/2024/10/15/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-2.png" class="" title="navigator中的 open-type">
<p>注意：</p>
<blockquote>
<p>在进行页面跳转时，需要在路径的前面添加 / 斜线，否则跳转不成功<navigator url="/pages/list/list?id=10&num=hue" open-type="navigate">到商品列表页面</navigator></p>
</blockquote>
<ul class="lvl-0">
<li class="lvl-2">
<p>navigate：只能跳转到非 TabBar 页面，不能跳转到 TabBar 页面，保留上一级页面</p>
</li>
<li class="lvl-2">
<p>redirect：只能跳转到非 TabBar 页面，不能跳转到 TabBar 页面，关闭上一级页面</p>
</li>
<li class="lvl-2">
<p>switchTab：只能跳转到 TabBar 页面，不能跳转到非 TabBar 页面，关闭其他所有的非 TabBar 页面</p>
</li>
<li class="lvl-2">
<p>reLaunch：关闭所有页面，然后打开小程序中某一个页面</p>
</li>
<li class="lvl-2">
<p>navigateBack返回上一页或者返回前几页，默认只能返回上一页</p>
<ul class="lvl-2">
<li class="lvl-6">delte：返回的层级，默认是 1，如果想返回几级，就写几</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>带参数的文件上传</title>
    <url>/2024/10/26/%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="带参数的文件上传"><strong>带参数的文件上传</strong></h2>
<span id="more"></span>
<h1>带参数的文件上传</h1>
<h2 id="Element-plus-组件upload-关闭自动上传">Element plus 组件upload 关闭自动上传</h2>
<img data-src="/2024/10/26/%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-1.png" class="" title="带参数的文件上传">
<h2 id="成功后的回调">成功后的回调</h2>
<img data-src="/2024/10/26/%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-2.png" class="" title="带参数的文件上传">
<h2 id="获取实际文件对象">获取实际文件对象</h2>
<img data-src="/2024/10/26/%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-3.png" class="" title="带参数的文件上传">
<h2 id="上传方法">上传方法</h2>
<h3 id="使用FormData-对象">使用FormData()对象</h3>
<p><strong>FormData</strong> 接口提供了一种表示表单数据的键值对 <code>key/value</code> 的构造方式，并且可以轻松的将数据通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/send"><code>XMLHttpRequest.send()</code></a> 方法发送出去，本接口和此方法都相当简单直接。如果送出时的编码类型被设为 <code>&quot;multipart/form-data&quot;</code>，它会使用和表单一样的格式。</p>
<h3 id="例子">例子</h3>
<p>下面的代码将创建一个空的 FormData 对象：</p>
<p>jsCopy to Clipboard</p>
<figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(); <span class="comment">// 当前为空</span></span><br></pre></td></tr></table></figure>
<p>你可以使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData/append"><code>FormData.append</code></a>来添加键/值对到表单里面；</p>
<p>jsCopy to Clipboard</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">formData.<span class="built_in">append</span>(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;Chris&quot;</span>);</span><br></pre></td></tr></table></figure>
<img data-src="/2024/10/26/%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-4.png" class="" title="带参数的文件上传">]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2025/05/23/day%2002%20HTML/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1>一、HTML结构分析</h1>
<h2 id="1-1-文档声明">1.1 文档声明</h2>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1733834354754.png" alt="1733834354754"></p>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1733834422129.png" alt="1733834422129"></p>
<h2 id="1-2-html元素">1.2 html元素</h2>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1733834679382.png" alt="1733834679382"></p>
<h3 id="1-2-1-html元素">1.2.1 html元素</h3>
<p>是指<html>这个具体的元素，表示HTML文档里面的根元素</p>
<h3 id="1-2-2-lang属性（language语言）">1.2.2 lang属性（language语言）</h3>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1733834969969.png" alt="1733834969969"></p>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1733835226332.png" alt="1733835226332"></p>
<p>根据lang属性的值来确定</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>网页阅读的语言</p>
</li>
<li class="lvl-2">
<p>网页翻译语言</p>
<p>​</p>
</li>
</ul>
<h2 id="1-3-head元素">1.3 head元素</h2>
<h3 id="1-3-1-HTML-head元素">1.3.1 HTML head元素</h3>
<p>规定文档的配置信息，又称元数据，包括文档标题，引用文档样式和脚本等。</p>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1733835919748.png" alt="1733835919748"></p>
<h3 id="1-3-2-常见设置">1.3.2 常见设置</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>网页标题<title></title></p>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1733836053723.png" alt="1733836053723"></p>
</li>
<li class="lvl-2">
<p>网页编码<meta></p>
</li>
</ul>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1733836069738.png" alt="1733836069738"></p>
<meta charset='utf-8'>
<h2 id="1-4-body元素">1.4 body元素</h2>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1733837055768.png" alt="1733837055768"></p>
<h3 id="1-4-1-h元素（heading）">1.4.1 h元素（heading）</h3>
<p>h1-h6的区别是通过css进行调整的</p>
<p>注意：h元素通常和SEO优化有关</p>
<h3 id="1-4-2-p元素">1.4.2 p元素</h3>
<h3 id="1-4-3-img元素">1.4.3 img元素</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>两个属性</p>
<ul class="lvl-2">
<li class="lvl-4">src ：图片路径</li>
<li class="lvl-4">alt ：当图片加载不出来时显示的文字（占位）</li>
</ul>
</li>
<li class="lvl-2">
<p>地址</p>
<ul class="lvl-2">
<li class="lvl-4">网络地址</li>
<li class="lvl-4">本地地址
<ul class="lvl-4">
<li class="lvl-6">相对路径</li>
<li class="lvl-6">绝对路径</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="1-4-4-a元素（anchor-锚）">1.4.4 a元素（anchor:锚）</h3>
<p>定义超链接，用于可打开新的URL</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>href：URL路径</p>
<ul class="lvl-2">
<li class="lvl-4">
<p>外部链接</p>
</li>
<li class="lvl-4">
<p>页面内跳转（锚点链接）</p>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1733922108166.png" alt="1733922108166"></p>
</li>
<li class="lvl-4">
<p>其他URL</p>
<ul class="lvl-4">
<li class="lvl-6">
<p>.zip压缩包   （下载）</p>
</li>
<li class="lvl-6">
<p>其他协议地址：mailto</p>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1733922001365.png" alt="1733922001365"></p>
</li>
</ul>
</li>
</ul>
</li>
<li class="lvl-2">
<p>target：默认_self，新建标签页_blank</p>
</li>
</ul>
<p>_parent 和 _top 和iframe结合使用</p>
<h3 id="1-4-5-iframe元素">1.4.5 iframe元素</h3>
<p>在HTML文档中嵌入另一个HTNL文档（在一个网页中嵌入另一个网页）</p>
<p>禁止网页在iframe中使用</p>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1733922907220.png" alt="1733922907220"></p>
<p>属性：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>href</p>
</li>
<li class="lvl-2">
<p>frameborder: 0 (无边框)，1（有边框）</p>
</li>
</ul>
<h3 id="1-4-6-div元素（division-分开，分配）">1.4.6 div元素（division:分开，分配）</h3>
<p>div,span元素（纯粹的容器）历史</p>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1733925369647.png" alt="1733925369647"></p>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1733926132877.png" alt="1733926132877"></p>
<h3 id="1-4-7-span元素">1.4.7 span元素</h3>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1733926142413.png" alt="1733926142413"></p>
<h3 id="1-4-8-不常见的元素">1.4.8 不常见的元素</h3>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1733926863286.png" alt="1733926863286"></p>
<h2 id="1-5-HTML全局属性">1.5 HTML全局属性</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>id</p>
</li>
<li class="lvl-2">
<p>class</p>
</li>
<li class="lvl-2">
<p>style</p>
</li>
<li class="lvl-2">
<p>title</p>
</li>
</ul>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1734004772284.png" alt="1734004772284"></p>
<h1>二、额外补充</h1>
<h2 id="2-1-字符实体">2.1 字符实体</h2>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1734005887126.png" alt="1734005887126"></p>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1734005908682.png" alt="1734005908682"></p>
<h2 id="2-2-URL地址">2.2 URL地址</h2>
<h3 id="2-2-1-URL">2.2.1 URL</h3>
<p>URL代表的时统一资源定位符（就是一个给定的独特资源在 Web 上的地址）</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>理论上说，每个有效的 URL 都指向一个唯一的资源；</p>
</li>
<li class="lvl-2">
<p>这个资源可以是一个 HTML 页面，一个 CSS 文档，一幅图像，等等;</p>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1734006298175.png" alt="1734006298175"></p>
</li>
</ul>
<p>统一资源定位符，俗称网络地址，相当于网络中的门牌号</p>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1733749087486.png" alt="1733749087486"></p>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1733749397608.png" alt="1733749397608"></p>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1733749414365.png" alt="1733749414365"></p>
<h3 id="2-2-2-URI">2.2.2 URI</h3>
<p>统一资源标识符，用于标识Web技术使用的逻辑或物理资源</p>
<h3 id="2-2-3-URL和URI的区别">2.2.3 URL和URI的区别</h3>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1733749929551.png" alt="1733749929551"></p>
<h2 id="2-3-元素语义化">2.3 元素语义化</h2>
<p>用正确的元素做正确的事</p>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1734009140142.png" alt="1734009140142"></p>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1734009215835.png" alt="1734009215835"></p>
<h2 id="2-4-SEO优化">2.4 SEO优化</h2>
<p>搜索引擎优化（英语:search engine optimization，缩写为SEO)是通过了解搜索引擎的运作规则来调整网站，以及提高网站在有关搜索引擎内排名的方式。</p>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1734009634026.png" alt="1734009634026"></p>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1734010243958.png" alt="1734010243958"></p>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1734010784393.png" alt="1734010784393"></p>
<h2 id="2-5-字符编码">2.5 字符编码</h2>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1734012727693.png" alt="1734012727693"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&#x27;UTF-8&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img data-src="C:%5CUsers%5C19923%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1734012808180.png" alt="1734012808180"></p>
]]></content>
  </entry>
  <entry>
    <title>post</title>
    <url>/2024/10/26/post/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
  </entry>
</search>
